import json
import logging
from channels.generic.websocket import AsyncWebsocketConsumer
from .models import ChatMessage

logger = logging.getLogger(__name__)

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = "global"
        self.room_group_name = f"chat_{self.room_name}"
        
        logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω")
        await self.channel_layer.group_add(self.room_group_name, self.channel_name)
        await self.accept()

    async def disconnect(self, close_code):
        logger.warning(f"üî¥ WebSocket –æ—Ç–∫–ª—é—á—ë–Ω: {close_code}")
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)

    async def receive(self, text_data):
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text_data}")

        data = json.loads(text_data)
        user = "User"  # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = data["message"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        chat_message = ChatMessage.objects.create(user=user, message=message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WebSocket
        await self.channel_layer.group_send(
            self.room_group_name, {"type": "chat_message", "message": chat_message.message}
        )

    async def chat_message(self, event):
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {event['message']}")
        await self.send(text_data=json.dumps({"message": event["message"]}))
