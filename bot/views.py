import os
import json
import logging
import requests
import openai
from dotenv import load_dotenv
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

if not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# URL API Telegram
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenAI API
openai.api_key = OPENAI_API_KEY

logger = logging.getLogger(__name__)

@csrf_exempt
def telegram_webhook(request):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram. """
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            chat_id = data["message"]["chat"]["id"]
            message_text = data["message"]["text"]

            ai_response = get_ai_response(message_text)

            response = requests.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": ai_response})
            logger.info(f"üì§ –û—Ç–≤–µ—Ç –≤ Telegram: {response.json()}")

            return JsonResponse({"status": "ok", "response": response.json()})
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram Webhook: {e}")
            return JsonResponse({"error": str(e)}, status=500)

    return JsonResponse({"error": "Invalid request"}, status=400)

def send_telegram_message(chat_id, text):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram. """
    response = requests.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": text})
    return response.json()

def get_ai_response(message):
    """ –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API. """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": message}]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
